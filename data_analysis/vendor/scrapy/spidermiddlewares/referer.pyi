# Stubs for scrapy.spidermiddlewares.referer (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

LOCAL_SCHEMES: Any
POLICY_NO_REFERRER: str
POLICY_NO_REFERRER_WHEN_DOWNGRADE: str
POLICY_SAME_ORIGIN: str
POLICY_ORIGIN: str
POLICY_STRICT_ORIGIN: str
POLICY_ORIGIN_WHEN_CROSS_ORIGIN: str
POLICY_STRICT_ORIGIN_WHEN_CROSS_ORIGIN: str
POLICY_UNSAFE_URL: str
POLICY_SCRAPY_DEFAULT: str

class ReferrerPolicy:
    NOREFERRER_SCHEMES: Any = ...
    def referrer(self, response_url: Any, request_url: Any) -> None: ...
    def stripped_referrer(self, url: Any): ...
    def origin_referrer(self, url: Any): ...
    def strip_url(self, url: Any, origin_only: bool = ...): ...
    def origin(self, url: Any): ...
    def potentially_trustworthy(self, url: Any): ...
    def tls_protected(self, url: Any): ...

class NoReferrerPolicy(ReferrerPolicy):
    name: Any = ...
    def referrer(self, response_url: Any, request_url: Any) -> None: ...

class NoReferrerWhenDowngradePolicy(ReferrerPolicy):
    name: Any = ...
    def referrer(self, response_url: Any, request_url: Any): ...

class SameOriginPolicy(ReferrerPolicy):
    name: Any = ...
    def referrer(self, response_url: Any, request_url: Any): ...

class OriginPolicy(ReferrerPolicy):
    name: Any = ...
    def referrer(self, response_url: Any, request_url: Any): ...

class StrictOriginPolicy(ReferrerPolicy):
    name: Any = ...
    def referrer(self, response_url: Any, request_url: Any): ...

class OriginWhenCrossOriginPolicy(ReferrerPolicy):
    name: Any = ...
    def referrer(self, response_url: Any, request_url: Any): ...

class StrictOriginWhenCrossOriginPolicy(ReferrerPolicy):
    name: Any = ...
    def referrer(self, response_url: Any, request_url: Any): ...

class UnsafeUrlPolicy(ReferrerPolicy):
    name: Any = ...
    def referrer(self, response_url: Any, request_url: Any): ...

class DefaultReferrerPolicy(NoReferrerWhenDowngradePolicy):
    NOREFERRER_SCHEMES: Any = ...
    name: Any = ...

class RefererMiddleware:
    default_policy: Any = ...
    def __init__(self, settings: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_crawler(cls, crawler: Any): ...
    def policy(self, resp_or_url: Any, request: Any): ...
    def process_spider_output(self, response: Any, result: Any, spider: Any): ...
    def request_scheduled(self, request: Any, spider: Any) -> None: ...
