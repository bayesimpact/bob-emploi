# Stubs for scrapy.settings (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import MutableMapping
from typing import Any, Optional

SETTINGS_PRIORITIES: Any

def get_settings_priority(priority: Any): ...

class SettingsAttribute:
    value: Any = ...
    priority: Any = ...
    def __init__(self, value: Any, priority: Any) -> None: ...
    def set(self, value: Any, priority: Any) -> None: ...

class BaseSettings(MutableMapping):
    frozen: bool = ...
    attributes: Any = ...
    def __init__(self, values: Optional[Any] = ..., priority: str = ...) -> None: ...
    def __getitem__(self, opt_name: Any): ...
    def __contains__(self, name: Any): ...
    def get(self, name: Any, default: Optional[Any] = ...): ...
    def getbool(self, name: Any, default: bool = ...): ...
    def getint(self, name: Any, default: int = ...): ...
    def getfloat(self, name: Any, default: float = ...): ...
    def getlist(self, name: Any, default: Optional[Any] = ...): ...
    def getdict(self, name: Any, default: Optional[Any] = ...): ...
    def getwithbase(self, name: Any): ...
    def getpriority(self, name: Any): ...
    def maxpriority(self): ...
    def __setitem__(self, name: Any, value: Any) -> None: ...
    def set(self, name: Any, value: Any, priority: str = ...) -> None: ...
    def setdict(self, values: Any, priority: str = ...) -> None: ...
    def setmodule(self, module: Any, priority: str = ...) -> None: ...
    def update(self, values: Any, priority: str = ...) -> None: ...
    def delete(self, name: Any, priority: str = ...) -> None: ...
    def __delitem__(self, name: Any) -> None: ...
    def copy(self): ...
    def freeze(self) -> None: ...
    def frozencopy(self): ...
    def __iter__(self): ...
    def __len__(self): ...
    def copy_to_dict(self): ...

class _DictProxy(MutableMapping):
    o: Any = ...
    settings: Any = ...
    priority: Any = ...
    def __init__(self, settings: Any, priority: Any) -> None: ...
    def __len__(self): ...
    def __getitem__(self, k: Any): ...
    def __setitem__(self, k: Any, v: Any) -> None: ...
    def __delitem__(self, k: Any) -> None: ...
    def __iter__(self, k: Any, v: Any): ...

class Settings(BaseSettings):
    def __init__(self, values: Optional[Any] = ..., priority: str = ...) -> None: ...

def iter_default_settings() -> None: ...
def overridden_settings(settings: Any) -> None: ...
