# Stubs for parsel.selector (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .csstranslator import GenericTranslator, HTMLTranslator
from .utils import extract_regex, flatten, iflatten
from lxml import etree
from typing import Any, List, Mapping, Optional

class SafeXMLParser(etree.XMLParser):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

def create_root_node(text: Any, parser_cls: Any, base_url: Optional[Any] = ...): ...

class SelectorList(list):
    def __getslice__(self, i: Any, j: Any): ...
    def __getitem__(self, pos: Any): ...
    def xpath(self, xpath: str, namespaces: Optional[Mapping[str, str]] = ..., **kwargs: Any) -> SelectorList: ...
    def css(self, query: str) -> SelectorList: ...
    def re(self, regex: Any, replace_entities: bool = ...): ...
    def re_first(self, regex: Any, default: Optional[Any] = ..., replace_entities: bool = ...): ...
    def getall(self) -> List[str]: ...
    extract: Any = ...
    def get(self, default: Optional[Any] = ...) -> str: ...
    def extract_first(self, default: Optional[Any] = ...) -> str: ...
    @property
    def attrib(self): ...

class Selector:
    selectorlist_cls: Any = ...
    type: Any = ...
    namespaces: Any = ...
    root: Any = ...
    def __init__(self, text: Optional[Any] = ..., type: Optional[Any] = ..., namespaces: Optional[Any] = ..., root: Optional[Any] = ..., base_url: Optional[Any] = ..., _expr: Optional[Any] = ...) -> None: ...
    def xpath(self, xpath: str, namespaces: Optional[Mapping[str, str]] = ..., **kwargs: Any) -> SelectorList: ...
    def css(self, query: str) -> SelectorList: ...
    def re(self, regex: Any, replace_entities: bool = ...): ...
    def re_first(self, regex: Any, default: Optional[Any] = ..., replace_entities: bool = ...): ...
    def get(self): ...
    extract: Any = ...
    def getall(self): ...
    def register_namespace(self, prefix: Any, uri: Any) -> None: ...
    def remove_namespaces(self) -> None: ...
    @property
    def attrib(self): ...
    def __bool__(self): ...
    __nonzero__: Any = ...
