syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "bob_emploi/frontend/api/discovery.proto";
import "bob_emploi/frontend/api/job.proto";
import "bob_emploi/frontend/api/project.proto";
import "bob_emploi/frontend/api/geo.proto";

package bayesimpact.pe;

// All data for a user of the mashup app, a job seeker.
message User {
  // A unique identifier for this user. It is not related to any public
  // identifiers although it is not obfuscated in the API. It looks like a normal Mongo ObjectID,
  // under the hood however we hash it with a salt to make it less guessable.
  string user_id = 1;

  // Profile of the user.
  UserProfile profile = 2;

  // ID of the google account linked to this profile.
  string google_id = 7;

  // ID of the Facebook account linked to this profile.
  string facebook_id = 8;

  // The date and time at which the user has registered with the app.
  google.protobuf.Timestamp registered_at = 6;

  // List of current projects for this user even the ones on stand-by.
  repeated Project projects = 3;

  // List of old projects (older first).
  repeated Project deleted_projects = 12;

  // App is not available to the user. A possible reason might be the user being in an
  // unverified data zone.
  bool app_not_available = 4;

  // Features enabled for this user.
  Features features_enabled = 9;

  // Interactions with the User that we need to record (e.g. whether a user has seen the
  // WelcomeBackModal or not).
  UserInteractions interactions = 5;

  // The last date on which the user loaded their information through the API.
  // We only look at the date of this value, not at the time.
  google.protobuf.Timestamp requested_by_user_at_date= 10;

  // The date and time we last sent an email to the user. This does not include
  // password recovery emails.
  google.protobuf.Timestamp last_email_sent_at = 11;

  // A list of explorations manually added by the user.
  repeated JobExplorationRequest manual_explorations = 13;
}

message UserInteractions {
  // The modal that we show when the user comes back to the dashboard 12h
  // or more after account creation.
  bool hasSeenFirstWelcomeBack = 1;

  // The modal that we show when the user comes back after more than 10 days of inactivity in
  // in the app, where inactivity is defined as not having loaded the user.
  bool hasSeenSecondWelcomeBack = 2;
}

message UserAuth {
  // A unique identifier for this user. It is not related to any public
  // identifiers although it is not obfuscated in the API.
  string user_id = 1;

  // A hashed version of the user's password: sha1(email + password).
  string hashed_password = 2;
}

// See http://go/pe:password-design
message AuthRequest {
  // An authentication token from the OAuth2 Google Sign-in flow.
  // See https://developers.google.com/identity/sign-in/web/backend-auth
  string google_token_id = 1;

  // An authentication token from the Facebook Login flow.
  // See https://developers.facebook.com/docs/games/gamesonfacebook/login#parsingsr.
  string facebook_signed_request = 2;

  // The email of the user. It can be used with hashed password or without,
  // then the server will return a hash_salt to use.
  string email = 3;

  // A hashed version of the user's password: sha1(salt + sha1(email +
  // password)), or only sha1(email + password) when creating it for the first
  // time.
  string hashed_password = 4;

  // Salt used for the hash.
  string hash_salt = 5;

  // First name of the user.
  string first_name = 6;

  // Last name of the user.
  string last_name = 7;

  // Reset auth token. A token that allows to authenticate the user directly.
  string auth_token = 8;
}

message AuthResponse {
  // The user's data.
  User authenticated_user = 1;

  // Whether the user is a new user (true) or one that was retrieved (false).
  // This can be used by the client to update the phrasing.
  bool is_new_user = 2;

  // An opaque string to use as salt to hash the password in a following
  // auth request.
  string hash_salt = 3;
}

// Profile of a user, a job seeker.
// Next ID: 19.
message UserProfile {
  // Where the user is living.
  FrenchCity city = 1;

  // The job, the user had just before being unemployed.
  Job latest_job = 3;

  // The gender of the user, at least the one they prefer when we have to use a
  // masculine or feminine grammatical form.
  Gender gender = 5;

  // User's email.
  string email = 7;

  // User's first name (e.g.: Stephan).
  string name = 8;

  // User's last name (e.g.: Corpet).
  string last_name = 16;

  // User's year of birth.
  uint32 year_of_birth = 9;

  // URL of a picture of the user.
  string picture_url = 12;

  // The current situation of the user (e.g.: Fresh graduate, lost job, etc...).
  Situation situation = 10;

  // All driving license types of a user (e.g. truck and car).
  repeated DrivingLicense driving_licenses = 23;

  // The users highest school degree.
  DegreeLevel highest_degree = 18;

  // How good the user rated their English skills on a 3 value scale.
  // (i.e. `-1 is undecided, 1: worst, 3: best)
  int32 english_level_estimate = 30;

  // How good the user rated their office software skills on a 3 value scale.
  // (i.e. `-1 is undecided, 1: worst, 3: best).
  // Keep in sync with JobRequirement.office_skills_level
  int32 office_skills_estimate = 31;

  // User frustration reasons (e.g.: no offers, no answers, single parent, ...).
  repeated Frustration frustrations = 32;

  // Whether the user could imagine to do a training or not.
  FlexibilityOption training_flexibility = 34;

  // Whether the user could imagine to lower their salary requirements.
  FlexibilityOption salary_requirement_flexibility = 35;

  // Whether the user could imagine to work on a less desirable contract type.
  FlexibilityOption contract_type_flexibility = 36;

  // Whether the user could imagine to move to a different city in order to get a job.
  FlexibilityOption geographical_flexibility = 37;

  // Whether the user could imagine to work in a different field.
  FlexibilityOption professional_flexibility = 38;

  // The preferred salary unit of the user.
  SalaryUnit preferred_salary_unit = 39;

  // Whether the user opted-in to receive the newsletter.
  bool is_newsletter_enabled = 11;

  // Whether the user opted-in to receive a weekly summary of their activity.
  bool is_weekly_summary_enabled = 13;

  // Which days of the week the user wants a notification email.
  repeated WeekDay email_days = 14;

  // Phone number of the user (only to call them to get more precise feedback).
  string phone_number = 15;

  // How the user is OK to give us feedback.
  FeedbackMedium feedback_medium = 17;
}

// A lightweight message to reference a user.
message UserId {
  // A unique identifier for this user. It is not related to any public
  // identifiers although it is not obfuscated in the API.
  string user_id = 1;
}

// A message containing fields according to which we can decide whether the app is available or not.
// To access these messages from the Mongo DB, the key is the MD5 digest of a combination of
// the postcodes with the ROME ID, connected by a colon (e.g. md5('1590:C1109')).
// We don't use the fields of the message, but keep them around for readability as the ID is so cryptic.
message UnverifiedDataZone {

  // A string of dash separated postcodes, as we also have them in the
  // Algolia `cities` index. As an example for Toulouse: `31000-31100-31200-31300-31400-31500`.
  string postcodes = 1;

  // ROME ID of the job group.
  string rome_id = 2;
}

// This message can only be modified server-side to decide to enable features
// that are still in development or in test to some users. See
// http://go/bob:feature-flags-design.
//
// Each feature flag should follow the guidelines:
//  - Do not use is_ or has_ prefix, as this is by design a list of features
//    where each field means "is this feature enabled".
//  - The name is specific to the feature added.
//  - The comment describes precisely what is being developped.
//  - The comment includes the date for when this feature started to be
//    implemented.
message Features {
  // Email notifications can be sent to any user that has checked some days
  // in profile.email_days. The feature here is for users that we opted-in
  // email notifications automatically. The name is a bit generic because of
  // historical reasons (when we started, only the users that we opted-in were
  // able to recieve notifications).
  // Started: 2016-11-23.
  bool email_notifications = 1;

  // Action button experiment.

  // In the dashboard, action blocks get a small button with a chevron that
  // expands when the action is hovered. This should be exclusive with the
  // action_button_round feature. If both are set, this one has priority.
  // Started: 2016-11-24.
  // Graduated: 2016-11-29.
  bool action_button_chevron = 2 [deprecated = true];

  // In the dashboard, action blocks get a regular round button. This should be
  // exclusive with the action_button_chevron feature. If both are set, the
  // chevron has priority.
  // Started: 2016-11-24.
  // Stopped: 2016-11-29.
  bool action_button_round = 3 [deprecated = true];

  // In the dashboard, action blocks get no button. This is used as a control
  // group for the experiment with action_button_chevron and
  // action_button_round.
  // Started: 2016-11-24.
  // Stopped: 2016-11-29.
  bool action_button_none = 4 [deprecated = true];

  // Control Tower icons experiment.

  // In the Control Tower and in the dashboard we show an icon that relates to
  // each other.
  // Started: 2016-11-28.
  // Graduated: 2016-12-07.
  bool chantier_icons = 5 [deprecated = true];

  // Control group for the above experiment (no icons shown).
  // Started: 2016-11-28.
  // Stopped: 2016-12-07.
  bool chantier_icons_control = 6 [deprecated = true];

  // Ablation experiment for the "I did this action" button.

  // In the Action Modal, make the "I did this" button discreet.
  // Started: 2016-12-01.
  // Stopped: 2016-12-08.
  bool action_done_button_discreet = 7 [deprecated = true];

  // Control group for the above experiment (regular green button shown).
  // Started: 2016-12-01.
  // Stopped: 2016-12-08.
  bool action_done_button_control = 8 [deprecated = true];

  // Whether we integrate La Bonne Boite results directly into our application.
  // Started: 2016-12-06.
  BinaryExperiment lbb_integration = 9;

  // Whether we show a modal to get more feedback once an action is done.
  // Started: 2016-12-07.
  // Graduated: 2016-12-16.
  BinaryExperiment action_feedback_modal = 10;

  // Whether we hide the Discovery Channel from the top navigation bar.
  // Started: 2016-12-07.
  // Stopped: 2017-01-03.
  BinaryExperiment hide_discovery_nav = 11;

  // Whether we show the "Sticky Action" UX to the user.
  // Graduated (directly): 2016-12-18.
  BinaryExperiment sticky_actions = 12;

  // This is not really an experiment but rather a marker for users for which
  // we have disabled all emailDays because they were not reading their emails.
  bool auto_stop_emails = 13;

  // Whether we show the "Advisor" UX to the user.
  // Graduated for new users: 2016-01-23.
  BinaryExperiment advisor = 14;

  // Enable all alpha features (usually for devs and/or user tests).
  bool alpha = 15;
}

enum Gender {
  UNKNOWN_GENDER = 0;

  MASCULINE = 1;

  FEMININE = 2;
}

// The current job search situation of a user.
enum Situation {
  UNKNOWN_SITUATION = 0;

  // First time looking for a job, e.g. a student.
  FIRST_TIME = 1;

  // User lost or quit their job. This might be due to an ending contract.
  LOST_QUIT = 2;

  // User is currently in a training.
  IN_TRAINING = 3;

  // User is currently employed.
  EMPLOYED = 5;
}

enum Frustration {
  UNKNOWN_JOB_SEARCH_FRUSTRATION = 0;

  // User cannot find enough offers that fit their criteria.
  NO_OFFERS = 1;

  // User does not receive enough answers to their applications.
  NO_OFFER_ANSWERS = 2;

  // User has trouble to come up with a decent CV.
  RESUME = 3;

  // User struggles in interview situations.
  INTERVIEW = 4;

  // User struggles finding a training.
  TRAINING = 5;

  // User has problems to stay motivated.
  MOTIVATION = 6;

  // User has problems with general time management.
  TIME_MANAGEMENT = 7;

  // User is a single parent.
  SINGLE_PARENT = 8;

  // User is handicaped.
  HANDICAPED = 9;

  // The users profile does not fit what recruters have in mind.
  ATYPIC_PROFILE = 10;

  // The user feels discriminated for their age.
  AGE_DISCRIMINATION = 11;

  // The user feels discriminated for their sex.
  SEX_DISCRIMINATION = 12;
}

// The order and the values of the enum matter as we use a LikertScale
// to edit them in on of the profile steps.
enum FlexibilityOption {
  UNKNOWN_FLEXIBILITY_OPTION = 0;

  // User can't imagine any change here.
  ABSOLUTELY_NOT = 1;

  // User could imagine flexibility if the improvement is enormous.
  IF_NEEDED = 2;

  // User is flexible.
  YES = 3;
}

// Day of the week.
enum WeekDay {
  UNKNOWN_DAY = 0;

  MONDAY = 1;
  TUESDAY = 2;
  WEDNESDAY = 3;
  THURSDAY = 4;
  FRIDAY = 5;
  SATURDAY = 6;
  SUNDAY = 7;
}

enum BinaryExperiment {
  NOT_IN_EXPERIMENT = 0;

  // The experiment is active for this user.
  ACTIVE = 1;

  // The user is in a control group: the experiment is not active.
  CONTROL = 2;
}

enum FeedbackMedium {
  UNKNOWN_FEEDBACL_MEDIUM = 0;

  PHONE = 1;

  ON_SITE = 2;

  PHONE_OR_ON_SITE = 3;
}
