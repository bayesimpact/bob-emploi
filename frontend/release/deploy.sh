#!/bin/bash

# Script to deploy a Bob release, both server and client.
#
# The canonical place for our releases are the Docker Images in Docker Hub.
# They are generated by CircleCI in an untainted way.
#
# The server gets released by creating a new deployment on Amazon Web Service's
# (AWS) ECS (EC2 Container Service), and waiting for new containers to be
# spawned and old containers to be stopped.
#
# The client gets released by deploying static files on OVH storage.
#
# Environment variables required:
# - GITHUB_TOKEN: GitHub credentials to check CI status, update the release and
#   the prod branch.
# - OS_PASSWORD, OS_USERNAME, etc: OpenStack credentials to push client app to OVH server.
# - SLACK_INTEGRATION_URL: Webhook to report deploy status to Slack.
#
# Optional:
# - CIRCLE_STAGE: if "deploy", the script will know it's run as part of Circle
#   CI deployment.
# - DRY_RUN: do not actually deploy.
#
# Usage:
# frontend/release/deploy.sh $CIRCLE_TAG

set -e
readonly DIRNAME=$(dirname "$0")
# Import functions echo_error, echo_warning...
source "$DIRNAME/echo_with_colors.sh"

if [ -n "$DRY_RUN" ]; then
  echo_warning 'DRY RUN: will not actually modify anything.'
fi

readonly TAG="$1"
if [ -z "$TAG" ]; then
  echo_error 'No tag provided.'
  exit 1
fi

if [ -z "$(git tag -l "$TAG")" ]; then
  echo_error "The tag $TAG does not exist locally."
  exit 2
fi

if [ -z "$OS_PASSWORD" ]; then
  echo_error 'Set up OpenStack credentials first.'
  echo "* Go to https://www.ovh.com/manager/cloud and select: Servers -> OpenStack"
  echo "* Create an user if you do not have any, and copy the password"
  echo "* Click on the little wrench and select 'Downloading an Openstack configuration file'"
  echo "* Select 'GRA1 - Gravelines'"
  echo "* Source this file to export the OpenStack environment variables, it will ask for your password."
  exit 3
fi

if ! command -v aws >/dev/null 2>&1; then
  echo_error 'Install and configure the aws CLI that is necessary for deployment.'
  echo "* Ask your favorite admin for the access to the AWS project if you do not have it yet"
  echo "* Log into your AWS console and go to IAM (https://console.aws.amazon.com/iam/home)"
  echo "* Create a new 'Access key ID' and the corresponding 'Secret' if you do not already have one"
  echo "* Run 'aws configure' and add your credentials (make sure to set the region to 'eu-west-3')"
  exit 4
fi

if [ -z "$SLACK_INTEGRATION_URL" ]; then
  echo_error 'Set up the Slack integration first.'
  echo "* Find private URL for Slack Integration at https://bayesimpact.slack.com/apps/A0F7XDUAZ-incoming-webhooks"
  echo "* Add this URL in your bashrc as SLACK_INTEGRATION_URL env var"
  exit 5
fi

if ! command -v swift >/dev/null 2>&1; then
  echo_error 'Set up the OpenStack Swift tool first.'
  echo "* Installation is probably as simple as \`pip install python-swiftclient\`"
  exit 6
fi

if ! swift list > /dev/null 2>&1; then
  echo_error 'OpenStack credentials are incorrect.'
  echo "* Go to https://www.ovh.com/manager/cloud and select: Servers -> OpenStack"
  echo "* Create an user if you do not have any, and copy the password"
  echo "* Click on the little wrench and select 'Downloading an Openstack configuration file'"
  echo "* Select 'GRA1 - Gravelines'"
  echo "* Source this file to export the OpenStack environment variables, it will ask for your password."
  exit 7
fi

if ! pip show python-keystoneclient > /dev/null; then
  echo_error 'Set up the keystoneclient first.'
  echo "* Installation is probably as simple as \`pip install python-keystoneclient\`"
  exit 8
fi

if [ -z "$GITHUB_TOKEN" ]; then
  echo_error 'Setup GITHUB_TOKEN env variable to get `hub` to work.'
  echo '* If trying to deploy from Circle CI, use the bob-emploi GitHub user.'
  echo '* Create one on https://github.com/settings/tokens'
  exit 9
fi

readonly GIT_ORIGIN_WITH_WRITE_PERMISSION=https://$GITHUB_TOKEN@github.com/bayesimpact/bob-emploi-internal.git
readonly DOCKER_SERVER_REPO="bob-emploi-frontend-server"
readonly DOCKER_CLIENT_REPO="bob-emploi-frontend"
readonly DOCKER_TAG="tag-$TAG"
readonly DOCKER_SERVER_IMAGE="bayesimpact/$DOCKER_SERVER_REPO:$DOCKER_TAG"
readonly DOCKER_CLIENT_IMAGE="bayesimpact/$DOCKER_CLIENT_REPO:$DOCKER_TAG"
readonly ECS_FAMILY="frontend-flask"
readonly ECS_SERVICE="flask-lb"
# Our OpenStack container, see
# https://www.ovh.com/manager/cloud/index.html#/iaas/pci/project/7b9ade05d5f84f719adc2cbc76c07eec/storage
readonly OPEN_STACK_CONTAINER="PE Static Assets"
# Our fallback s3 bucket, see
# https://s3.console.aws.amazon.com/s3/buckets/bob-emploi-client/?region=eu-west-3&tab=overview
readonly S3_BUCKET=bob-emploi-client
# When migrating to a new region, set this to the new region to update both region at once.
readonly ALTERNATE_AWS_REGION=


# Deploying the server.


# If we are in the CircleCI step 'deploy' of the 'release' workflow, then we already know that
# Docker Hub images are ready. Note that 'hub ci-status' would not be successful if we ran it
# as we are still in the workflow (deadlock).
if [ "$CIRCLE_STAGE" != 'deploy' ]; then
  echo_info 'Checking that the server Docker image exists…'
  # TODO(pascal): Check for a better way that the Docker image exists, querying
  # Docker Hub is too long because you need to list all the tags.
  hub ci-status $TAG > /dev/null || {
    echo_error "The tag $TAG did not run properly on CircleCI, chances are the tag does not exist in Docker Registry."
    exit 10
  }
fi

# Prepare Release Notes.
readonly RELEASE_NOTES=$(mktemp)
hub release show $TAG 2> /dev/null > $RELEASE_NOTES || {
  echo_error "No release notes found."
  exit 11
}
echo 'Release notes are:'
echo '-------------------------------------------------------------------------------'
cat $RELEASE_NOTES
echo '-------------------------------------------------------------------------------'

sed -i -e "/^#/d" $RELEASE_NOTES
if [ -z "$(grep "^." $RELEASE_NOTES)" ]; then
  echo_error 'Canceling deployment due to empty release notes. This is not expected, the workflow step ask-for-manual-approval should have required the release notes.'
  exit 12
fi

echo_info 'Creating a new task definition…'
# Do not print sensitive info from AWS.
readonly CURRENT_SETTINGS=${-}
set +x
readonly PREVIOUS_DOCKER_SERVER_IMAGE=$(
  aws ecs describe-task-definition --task-definition $ECS_FAMILY | \
    python3 -c "import sys, json; containers = json.load(sys.stdin)['taskDefinition']['containerDefinitions']; print(containers[0]['image'])")

if [ "$PREVIOUS_DOCKER_SERVER_IMAGE" == "$DOCKER_SERVER_IMAGE" ]; then
  echo_info 'The server is already deployed.'
else
  readonly CONTAINERS_DEFINITION=$(
    aws ecs describe-task-definition --task-definition $ECS_FAMILY | \
      python3 -c "import sys, json; containers = json.load(sys.stdin)['taskDefinition']['containerDefinitions']; containers[0]['environment'] = [dict(env_var, value='prod.$TAG') if env_var['name'] == 'SERVER_VERSION' else env_var for env_var in containers[0]['environment']]; containers[0]['image'] = '$DOCKER_SERVER_IMAGE'; print(json.dumps(containers))")

  if [ -z "$DRY_RUN" ]; then
    aws ecs register-task-definition --family=$ECS_FAMILY --container-definitions "$CONTAINERS_DEFINITION" > /dev/null
    if [ -n "$ALTERNATE_AWS_REGION" ]; then
      aws ecs register-task-definition --family=$ECS_FAMILY --container-definitions "$CONTAINERS_DEFINITION" --region="$ALTERNATE_AWS_REGION" > /dev/null
    fi
  fi
  set -$CURRENT_SETTINGS

  echo_info 'Rolling out the new task definition…'
  if [ -z "$DRY_RUN" ]; then
    aws ecs update-service --service=$ECS_SERVICE --task-definition=$ECS_FAMILY > /dev/null
    if [ -n "$ALTERNATE_AWS_REGION" ]; then
      aws ecs update-service --service=$ECS_SERVICE --task-definition=$ECS_FAMILY --region="$ALTERNATE_AWS_REGION" > /dev/null
    fi

    function count_deployments()
    {
      aws ecs describe-services --services $ECS_SERVICE "$@" | \
        python3 -c "import sys, json; deployments = json.load(sys.stdin)['services'][0]['deployments']; print(len(deployments))"
    }

    function wait_for_deployment()
    {
      while [ "$(count_deployments "$@")" != "1" ]; do
        printf .
        sleep 10
      done
    }

    wait_for_deployment
    if [ -n "$ALTERNATE_AWS_REGION" ]; then
      wait_for_deployment --region="$ALTERNATE_AWS_REGION"
    fi
  fi

  echo_success 'Server deployed!'
fi


# Deploying the client.


# To get the files, this script downloads the Docker Images from Docker
# Registry, then extract the html folder from the Docker Image (note that to do
# that we need to create a temporary container using that image). The html
# folder is extracted as a TAR archive that we unpack in a local dir.
#
# Once we have the file we can upload them to OVH Storage using the OpenStack
# tool swift.

echo_info 'Downloading the client Docker Image…'
docker pull $DOCKER_CLIENT_IMAGE

echo_info 'Extracting the archive from the Docker Image…'
readonly TMP_TAR_FILE="$(mktemp).tar"
readonly TMP_DOCKER_CONTAINER=$(docker create $DOCKER_CLIENT_IMAGE)
docker cp $TMP_DOCKER_CONTAINER:/usr/share/bob-emploi/html - > $TMP_TAR_FILE
docker rm $TMP_DOCKER_CONTAINER

echo_info 'Extracting files from the archive…'
readonly TMP_DIR=$(mktemp -d)
tar -xf $TMP_TAR_FILE -C $TMP_DIR --strip-components 1
rm -r $TMP_TAR_FILE

echo_info 'Uploading files to the OpenStack container and S3 bucket…'
pushd $TMP_DIR
if [ -z "$DRY_RUN" ]; then
  swift upload "$OPEN_STACK_CONTAINER" --skip-identical *
  aws s3 cp "$(pwd)" "s3://$S3_BUCKET/" --recursive
fi
popd

rm -r $TMP_DIR

echo_info 'Logging the deployment on GitHub…'
echo >> $RELEASE_NOTES
echo "Deployed on $(date -R -u)" >> $RELEASE_NOTES
readonly PREVIOUS_RELEASE="$(git describe --tags origin/prod)"
if [ -z "$DRY_RUN" ]; then
  hub release edit --draft=false --file=$RELEASE_NOTES $TAG
  git remote set-url origin $GIT_ORIGIN_WITH_WRITE_PERMISSION
  git push -f origin $TAG:prod
fi

# TODO(cyrille): Add release info to Sentry, with sourcemap url.

# Ping Slack to say the deployment is done.
readonly SLACK_MESSAGE=$(mktemp)
readonly ROLLBACK_COMMAND=\`"frontend/release/deploy.sh $PREVIOUS_RELEASE"\`
python3 -c "import json
release_notes = open('$RELEASE_NOTES', 'r').read()
slack_message = {'text': 'A new version of Bob has been deployed ($TAG).\n%s\nTo rollback run: $ROLLBACK_COMMAND' % release_notes}
with open('$SLACK_MESSAGE', 'w') as slack_message_file:
  json.dump(slack_message, slack_message_file)"
if [ -z "$DRY_RUN" ]; then
  wget -o /dev/null -O /dev/null --post-file=$SLACK_MESSAGE "$SLACK_INTEGRATION_URL"
else
  echo 'Would send the following message to Slack:'
  cat $SLACK_MESSAGE
  echo ''
fi
rm -f $SLACK_MESSAGE
rm -f $RELEASE_NOTES

echo_success "Success!"
echo "Please wait ~15 minutes and check that everything works. If needed rollback using: $ROLLBACK_COMMAND."
