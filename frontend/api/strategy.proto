syntax = "proto3";

import "bob_emploi/frontend/api/options.proto";

package bayes.bob;

// See go/bob:strategies about what we mean by strategies. This represents a strategy as given to
// the user.
message Strategy {
    // A title for the strategy, in the language of the user.
    string title = 1;

    // A header for the strategy, to explain why it's given to the user, and introduces the advice
    // we're going to give.
    string header = 2;

    // The advice module IDs we want to show to the user. Their order is not important for now, as
    // they are ordered by their relevance to the user.
    repeated StrategyAdvice pieces_of_advice = 3;

    // Value added by this strategy to the overall Bob score, in percent.
    uint32 score = 4;

    // ID of the strategy module, this strategy was created from.
    string strategy_id = 5;

    // A short text that Bob says to make sure the user is ready to commit to this strategy. Uses
    // markdown.
    // DEPRECATED since 2019-05-14: The workflow has changed, and the content was a near duplicate
    // of header.
    string confirmation_talk = 6 [deprecated = true];

    // Whether we consider this strategy not to be so relevant to the user's situation.
    bool is_secondary = 7;

    // Whether we consider this strategy to be the most relevant to the user's situation.
    bool is_principal = 8;

    // A short description of what this strategy is for.
    string description = 9;
}

// An advice with a possible header to introduce it.
message StrategyAdvice {
    // The ID of the advice module.
    string advice_id = 1;

    // An optional header for this advice.
    string header = 2;

    // An optional teaser for this advice, to override the one given in diagnostic
    // (currently presented as a goal).
    string teaser = 3;
}

message Strategies {
    // A list of strategies, ordered by descending score.
    repeated Strategy strategies = 1;
}

// A module for a strategy, that describes how it is selected and populated. This assumes that the
// user is already in a given diagnostic category.
// (Next ID: 7)
message StrategyModule {
    // DEPRECATED since 2019-03: use category_ids instead.
    // The diagnostic category in which this strategy should be shown.
    string category_id = 5 [deprecated = true];

    // The diagnostic categories in which this strategy should be shown.
    repeated string category_ids = 8;

    // An identifier to match this strategy to its imported advice templates.
    string strategy_id = 6;

    // A scoring model to define whether this strategy should be selected for the user. The score
    // shows the hypothetical upgrade in Bob score that applying the strategy would give.
    string trigger_scoring_model = 1 [(string_format) = SCORING_MODEL_ID];

    // The title for this strategy.
    string title = 2 [(string_format) = NATURAL_LANGUAGE];

    // The template for a header for this strategy.
    string header_template = 3 [(string_format) = NATURAL_LANGUAGE, (string_format) = SCORING_PROJECT_TEMPLATE];

    // The advices we want to give in this strategy. If none of them is given to the user, it should
    // not be shown.
    repeated StrategyAdviceTemplate pieces_of_advice = 4;

    string description_template = 9 [(string_format) = NATURAL_LANGUAGE, (string_format) = SCORING_PROJECT_TEMPLATE];
}

message StrategyAdviceTemplate {
    // The ID of the advice module.
    string advice_id = 1;

    // An optional header for this advice.
    string header_template = 2 [(string_format) = NATURAL_LANGUAGE, (string_format) = SCORING_PROJECT_TEMPLATE];

    // An optional teaser for this advice.
    string teaser_template = 4 [(string_format) = NATURAL_LANGUAGE, (string_format) = SCORING_PROJECT_TEMPLATE];

    // Whether this advice module is required for the strategy to be shown.
    bool is_required = 3;

    // The strategy module in which this advice should be shown.
    string strategy_id = 5;
}
