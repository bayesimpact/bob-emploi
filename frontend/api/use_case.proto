syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "bob_emploi/frontend/api/diagnostic.proto";
import "bob_emploi/frontend/api/job.proto";
import "bob_emploi/frontend/api/stats.proto";
import "bob_emploi/frontend/api/user.proto";

package bayes.bob;

message UseCasePools {
  // A sorted list of use case groups. The ones available in the db to be fetch.
  repeated UseCasePool use_case_pools = 1;
}

message UseCases {
  // A list of anonymized user examples.
  repeated UseCase use_cases = 1;
}

message UseCasePool {
  // Name of the pool, usually the date of creation.
  string name = 1;

  // How many use cases are in this group.
  int32 useCaseCount = 2;

  // How many use cases have already been evaluated in this group.
  int32 evaluatedUseCaseCount = 3;

  // Timestamp of the most recent use case.
  google.protobuf.Timestamp last_user_registered_at = 4;
}

message UseCase {
  // Unique use case ID.
  string use_case_id = 1;

  // Name of the use case pool it is part of, if any.
  string pool_name = 2;

  // Index of this use case in its pool.
  int32 index_in_pool = 3;

  // Title of the use case, e.g. "Baker in Rennes";
  string title = 4;

  // Actual user data.
  User user_data = 5;

  // The evaluation for this use case.
  UseCaseEvaluation evaluation = 6;
}

message UseCaseEvaluation {
  // When the evaluation was last done.
  google.protobuf.Timestamp evaluated_at = 1;

  // Email address of the user that did the latest evaluation of the use case.
  string by = 6;

  // General score for this use case.
  UseCaseScore score = 2;

  // General comments for this use case.
  string comments = 3;

  // New score for advice modules.
  // TODO: put this info in AdviceEvaluation if possible (note that we need to store "0" value
  // for "modules" to mean that the advice should be hidden).
  map<string, int32> modules = 4;

  // Evaluation for each advice modules.
  map<string, AdviceEvaluation> advices = 5;

  // Evaluation of the diagnostic.
  map<string, GenericEvaluation> diagnostic = 7;
}

message AdviceEvaluation {
  // Whether the advice needs to be optimized with better data and content.
  // TODO(pascal): Convert to snake case.
  bool shouldBeOptimized = 1;

  // Comment about the advice.
  string comment = 2;
}

message GenericEvaluation {
  // Free form comment about the part being evaluated.
  string comment = 1;
}

enum UseCaseScore {
  UNKOWN_EVALUATION = 0;
  EXCELLENT = 1;
  GOOD_ENOUGH = 2;
  BAD = 3;
}

message UseCaseCreateRequest {
  // Name of the pool in which to add the use case. If this is empty, the use case won't be saved
  // in the database.
  string pool_name = 2;

  oneof identifier {
    // Email of the user to create the use case from.
    string email = 1;

    // ID of the user to create the use case from.
    string user_id = 3;

    // ID of support ticket to create the use case from.
    // Finds all users that have this ID as ticket.
    string ticket_id = 4;
  }
}

message UseCaseFiltersRequest {
  // A set of filter IDs we want use cases for. The IDs can be found in the scoring module.
  repeated string filters = 1;

  // Maximum number of expected use cases. Defaults to 20.
  int32 max_count = 2;

  // Maximum number of searched use cases. Defaults to 400.
  int32 max_search_count = 3;
}

// A message giving a repartition of a number of use cases in different categories, with example
// use cases in each category.
message UseCaseDistribution {
  // The total count of use cases in the distribution.
  uint32 total_count = 1;

  // The repartition in different categories of the use cases.
  map<string,UseCaseExamples> distribution = 2;

  // Use cases that have not been classified in any of the categories.
  UseCaseExamples missing_use_cases = 3;

  // The ordered list of categories that was used to determine the distribution. This field might be
  // empty if we assume the recipient is already aware of it.
  repeated DiagnosticCategory categories = 4;
}

message UseCaseExamples {
  // The number of use cases classified in this category.
  uint32 count = 1;

  // A set of example use cases in this category.
  repeated UseCase examples = 2;
}

message LaborStatsData {
  // Information on the job group.
  JobGroup job_group_info = 1;

  // Market (departement x job group) statistics.
  LocalJobStats local_stats = 2;

  // Product users statistics.
  UsersCount user_counts = 3;
}

// A message for requesting computation of statistical distribution of use cases in different
// diagnostic categories.
message UseCasesDistributionRequest {
  // A BobMind represented as an ordered list of categories with their filters.
  repeated DiagnosticCategory categories = 1;

  // Maximum number of use cases to consider. Defaults to 400.
  uint32 max_use_cases = 2;
}
