syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "bob_emploi/frontend/api/user.proto";

package bayes.bob;


// Next ID: 16.
message UserAuth {
  // A unique identifier for this user. It is not related to any public
  // identifiers although it is not obfuscated in the API.
  string user_id = 1;

  // A hashed version of the user's password: sha1(email + password).
  string hashed_password = 2;
}

// See http://go/pe:password-design
message AuthRequest {
  // An authentication token from the OAuth2 Google Sign-in flow.
  // See https://developers.google.com/identity/sign-in/web/backend-auth
  string google_token_id = 1;

  // An access token from the Facebook Login flow.
  string facebook_access_token = 15;

  // The email of the user. It can be used with hashed password or without,
  // then the server will return a hash_salt to use.
  string email = 3;

  // A hashed version of the user's password: sha1(salt + sha1(email +
  // password)), or only sha1(email + password) when creating it for the first
  // time.
  string hashed_password = 4;

  // Salt used for the hash.
  string hash_salt = 5;

  // First name of the user.
  // TODO(cyrille): Move to user_data.
  string first_name = 6;

  // Last name of the user.
  // TODO(cyrille): Move to user_data.
  string last_name = 7;

  // Reset auth token. A token that allows to authenticate the user directly.
  string auth_token = 8;

  // The user's ID to authenticate using the pair user ID / auth token.
  string user_id = 9;

  // Auth code returned by PE Connect.
  // See https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/utiliser-les-api/authorization-code-flow.html.
  string pe_connect_code = 10;

  // Random ID generated to get the PE Connect code.
  string pe_connect_nonce = 11;

  // Auth code returned by LinkedIn OAuth2.
  // See https://developer.linkedin.com/docs/oauth2.
  string linked_in_code = 12;

  // Other fields to be set in the user's proto at registration.
  AuthUserData user_data = 13;

  // The new hashed version of the users password: sha1(email + password).
  string new_hashed_password = 14;
}

message AuthUserData {
  bool can_tutoie = 1;
}

message AuthResponse {
  // The user's data.
  User authenticated_user = 1;

  // Whether the user is a new user (true) or one that was retrieved (false).
  // A guest registering with a mean of authentication is considered as new.
  // This can be used by the client to update the phrasing.
  bool is_new_user = 2;

  // An opaque string to use as salt to hash the password in a following
  // auth request.
  string hash_salt = 3;

  // Authentication token. More details in go/bob:security
  string auth_token = 4;

  // Timestamp of the last connection before this one.
  google.protobuf.Timestamp last_access_at = 5;

  // Whether the error is from the server, not from the client.
  bool is_server_error = 6;

  // The error message from the server.
  string error_message = 7;

  // Whether the password was successfully updated (created or modified).
  bool is_password_updated = 8;

  // Whether the authentication failed because of an expired token.
  bool has_token_expired = 9;
}

// Tokens and URLs for the user to access the API with various level of authentication.
// All tokens and URLs do not expire except if specified.
message AuthTokens {
  // A simple auth token, used with the user ID to access the API.
  string auth = 1;

  // An URL to access the app directly authenticated.
  string auth_url = 2;

  // A token allowing to update one's employment status.
  string employment_status = 3;

  // An URL to update the user's employment status.
  string employment_status_url = 4;

  // A token allowing to update one's answer to the NPS form.
  string nps = 5;

  // An URL to update the user's answer to the NPS form.
  string nps_url = 6;

  // A token allowing to update one's settings.
  string settings = 7;

  // An URL to update the user's settings.
  string settings_url = 8;

  // A token allowing to unsubscribe.
  string unsubscribe = 9;

  // An URL for the user to unsubscribe.
  string unsubscribe_url = 10;

  // The user internal ID.
  string user = 11;

  // A token to reset the user's password.
  string reset = 12;

  // An URL to reset the user's password.
  string reset_url = 13;
}
