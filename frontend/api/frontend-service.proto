syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

import "bob_emploi/frontend/api/action.proto";
import "bob_emploi/frontend/api/application.proto";
import "bob_emploi/frontend/api/association.proto";
import "bob_emploi/frontend/api/commute.proto";
import "bob_emploi/frontend/api/diagnostic.proto";
import "bob_emploi/frontend/api/event.proto";
import "bob_emploi/frontend/api/export.proto";
import "bob_emploi/frontend/api/feedback.proto";
import "bob_emploi/frontend/api/job.proto";
import "bob_emploi/frontend/api/jobboard.proto";
import "bob_emploi/frontend/api/project.proto";
import "bob_emploi/frontend/api/stats.proto";
import "bob_emploi/frontend/api/use_case.proto";
import "bob_emploi/frontend/api/user.proto";

package bayes.bob;

// TODO: Actually use the protobuffers on the client side to enforce the API.

// This service is mainly meant for a logged-in user, so all methods below assume
// that they can retrieve the UserID except for GetConfig.
service FrontendService {
  // Retrieve the user's data (the input is actually only a user's ID).
  rpc GetUser(User) returns (User);

  // Save the user's data.
  rpc SaveUser(User) returns (User);

  // Gives some feedback about the app or a specific part of the app.
  rpc GiveFeedback(Feedback) returns (google.protobuf.Empty);

  // Save the response from the user to the survey we send to ask for feedback on the app
  // and on the advices.
  rpc SaveNPSSurveyResponse(NPSSurveyResponse) returns (google.protobuf.Empty);

  // Get stats of the app usage.
  rpc UsageStats(google.protobuf.Empty) returns (UsersCount);

  // Delete the user and all data associated.
  rpc DeleteUser(User) returns (UserId);

  // User accessed our client app (as opposed to a tool accessing the API
  // directly).
  rpc UseApp(User) returns (User);

  // Update user's last employment status.
  rpc UpdateEmploymentStatus(EmploymentStatus) returns (google.protobuf.Empty);

  // Advise on a given project (the first one find in the user proto) and
  // returns personalized advice. In User, not all the fields need to be
  // populated, the method uses the following fields: features_enabled, profile
  // and projects. Note that the user does not need to have an ID nor to exist
  // in the database.
  rpc AdviseOnProject(User) returns (Advices);

  // Assign categories to advice for a given project.
  rpc CategorizeOnAdvice(User) returns (AdviceCategories);

  // Authenticate a user: retrieve a user's data or create a new user.
  rpc Authenticate(AuthRequest) returns (AuthResponse);

  // Get requirements for a job group.
  rpc JobGroupRequirements(JobGroup) returns (JobRequirements);

  // Get requirements for a project. For now they are only requirements for the
  // job group.
  rpc ProjectRequirements(Project) returns (JobRequirements);

  // Retrieve a list of events for a project.
  rpc ProjectEvents(Project) returns (Events);

  // Retrieve a list of tips to prepare for an interivew for a project.
  rpc ProjectInterviewTips(Project) returns (InterviewTips);

  // Retrieve a list of job boards for a project.
  rpc ProjectJobBoards(Project) returns (JobBoards);

  // Retrieve a list of tips to improve a resume for a project.
  rpc ProjectResumeTips(Project) returns (ResumeTips);

  // Retrieve a list of volunteering missions for a project.
  rpc ProjectVolunteer(Project) returns (VolunteeringMissions);

  // Get all available tips for a piece of advice in a project.
  rpc ProjectAdviceTips(Advice) returns(AdviceTips);

  // Retrieve an export of the user's current dashboard
  // (the input is actually only an dashboard export's ID).
  rpc GetDashboardExport(DashboardExport) returns (DashboardExport);

  // Migrate a user from Mashup to Advisor (the input is actually only a user's ID).
  rpc MigrateToAdvisor(User) returns (User);

  // Retrieve information about jobs whithin a job group (the input is actually
  // only a job group's ROME ID).
  rpc GetJobs(JobGroup) returns (JobGroup);

  // Diagnose a user project.
  rpc DiagnoseProject(User) returns (Diagnostic);

  // Retrieve information about possible cities to commute to for this project.
  rpc GetCommutingCities(Project) returns (CommutingCities);

  // Retrieve expanded card data for an advice module for a project.
  rpc AdviceExpandedCardData(Project) returns (google.protobuf.Any);

  // Retrieve a list of the available pools of anonymized user examples.
  rpc EvalUseCasePools(google.protobuf.Empty) returns (UseCasePools);

  // Retrieve a list of anonymized user examples from one pool.
  rpc EvalUseCases(UseCasePool) returns (UseCases);

  // Evaluate a use case.
  rpc EvalUseCase(UseCaseEvaluation) returns (google.protobuf.Empty);

  // Create a use case from a user.
  rpc EvalUseCaseCreate(UseCaseCreateRequest) returns (UseCase);
}
