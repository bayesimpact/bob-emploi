syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "bob_emploi/frontend/api/action.proto";
import "bob_emploi/frontend/api/company.proto";
import "bob_emploi/frontend/api/diagnostic.proto";
import "bob_emploi/frontend/api/geo.proto";
import "bob_emploi/frontend/api/job.proto";
import "bob_emploi/frontend/api/options.proto";
import "bob_emploi/frontend/api/seasonal_jobbing.proto";
import "bob_emploi/frontend/api/training.proto";

package bayes.bob;

// Next available tag: 42.
message Project {
  // A unique identifier for this project.
  string project_id = 1 [(field_usage) = PERSONAL_IDENTIFIER];

  // A short descriptive title in the user's language.
  string title = 2 [(field_usage) = APP_ONLY];

  // Current status of this project for the user.
  ProjectStatus status = 3 [(field_usage) = APP_ONLY];

  // Job targeted by this project.
  Job target_job = 6;

  // Sector of activity targeted by this project.
  ActivitySector activity_sector = 30;

  // The target city for this project, or one of the targeted area (see `area_type`).
  FrenchCity city = 40;

  // The type of geographic area for this project. If the field `city` is set
  // and this is a type bigger than a city, then only the larger fields of the
  // FrenchCity message are relevant.
  AreaType area_type = 41;

  // Minimal salary requested by the user if any. The unit of this field is ANNUAL_GROSS_SALARY.
  float min_salary = 8;

  // A set of employment types requested by the user if any (e.g. CDI).
  repeated EmploymentType employment_types = 36 [(list_format) = REPLACEABLE];

  // Set of chantiers templates that have been seen by the user: keys are
  // chantier template ids, values are the activation state of the chantiers.
  // Chantier template missing from this set have never been seen by the user
  // for this project.
  // TODO(pascal): Find what to do with that, it is still used in the dashboard
  // export, but nowhere else.
  map<string, bool> activated_chantiers = 18 [deprecated = true, (field_usage) = APP_ONLY];

  // List of current actions for this project. They stay in here until the next
  // generation of new actions and then the finished or declined ones are moved
  // to past_actions. They are sorted by their created_at field: most recent
  // last.
  // NOTE: We do not use it anymore but old projects might still have this
  // field set from previous versions.
  repeated Action actions = 25 [deprecated = true, (field_usage) = ALGORITHM_RESULT];

  // List of past actions that were done or declined in previous days. They are
  // sorted by their stopped_at field: most recent last.
  // NOTE: We do not use it anymore but old projects might still have this
  // field set from previous versions.
  repeated Action past_actions = 35 [deprecated = true, (field_usage) = ALGORITHM_RESULT];

  // List of actions that are stuck by the users. They are sorted by their
  // stucked_at field: most recent last.
  // NOTE: We do not use it anymore but old projects might still have this
  // field set from previous versions.
  repeated Action sticky_actions = 10 [deprecated = true, (field_usage) = ALGORITHM_RESULT];

  // Reason why this project was deleted.
  string deletion_reason = 14 [(field_usage) = USER_FEEDBACK];

  // The date and time at which this project was created or if it was a
  // suggestion, when the suggestion was first created.
  google.protobuf.Timestamp created_at = 15;

  // The kind of project (e.g. to find a job).
  ProjectKind kind = 19;

  // Whether the user worked in this job before.
  PreviousJobSimilarity previous_job_similarity = 20;

  // The seniority of the user regarding the project profession.
  // Only set if experience != NEVER_DONE.
  ProjectSeniority seniority = 27;

  // The user's estimate whether they have all the required diplomas,
  // together with a list of the asked diplomas.
  TrainingFulfillmentEstimate training_fulfillment_estimate = 12;

  // A set of workload types that the user could accept (e.g. full time).
  repeated ProjectWorkload workloads = 37 [(list_format) = REPLACEABLE];

  // How good is their network for this project from 1 to 3. 1 = weak, 3 =
  // super strong, -1 = unknown.
  int32 network_estimate = 22;

  // How long the user searches in this field in months. -1 means not started yet.
  // 19 means more than 18 months.
  // DEPRECATED: Do not rely on this value but instead always check the two
  // fields below.
  // TODO(pascal): Switch all usage to the new fields, convert all old users
  // and remove the field.
  int32 job_search_length_months = 31 [deprecated = true];

  oneof job_search_length {
    // Whether the user has started searching in this field.
    bool job_search_has_not_started = 24;

    // When the user started searching in this field.
    google.protobuf.Timestamp job_search_started_at = 26;
  }

  // Users estimate of how many offers they usually have access to per week.
  NumberOfferEstimateOption weekly_offers_estimate = 32;

  // Users estimate of how many applications they usually send per week.
  // We are re-using the weekly_offers_estimate options here as they are roughly the same.
  NumberOfferEstimateOption weekly_applications_estimate = 33;

  // TODO: Create a new enum for interviews and propagate the changes through the whole app.
  // Users estimate of how many interviews they had in total.
  // We are re-using the weekly_offers_estimate options here as they are roughly the same.
  NumberOfferEstimateOption total_interviews_estimate = 34;

  // User estimate of how many interviews they had in total. 0 actually means
  // unknown, and the -1 means the user specified they never did any
  // interviews.
  int32 total_interview_count = 13;

  // Job stats for this specific project.
  LocalJobStats local_stats = 9 [(field_usage) = ALGORITHM_RESULT];

  // Sorted list of advices that triggered for this user.
  repeated Advice advices = 21 [(field_usage) = ALGORITHM_RESULT];

  // Tells whether the project is missing information and needs more information by the user.
  bool is_incomplete = 23;

  // Feedback from user when the advice given for this project was useless to them.
  // TODO(pascal): Convert to full feedback.
  string useless_advice_feedback = 11 [(field_usage) = USER_FEEDBACK];

  // User feedback on this project.
  ProjectFeedback feedback = 17 [(field_usage) = USER_FEEDBACK];

  Diagnostic diagnostic = 28 [(field_usage) = ALGORITHM_RESULT];

  // User level of involvement in this job.
  PassionateLevel passionate_level = 38;
}

message ProjectFeedback {
  // General score: 0 means unknown, and then from 1 to 5.
  int32 score = 1;

  // Freeform text feedback given by the user.
  string text = 2;

  // For each advice module whether the user found it useful/interesting.
  map<string, bool> useful_advice_modules = 3;
}

// Next ID: 35.
message Advice {
  // Unique ID for the advice module: note that it can be the same for other
  // users or for other projects. e.g "reorientation", "spontaneous-application".
  string advice_id = 1;

  // Status of this advice.
  AdviceStatus status = 2;

  // Feedback of the user when they decline an advice.
  string declined_reason = 3;

  // Number of stars (1 to 3) assigned to this advice when first scored.
  float num_stars = 5;

  // TODO(cyrille): Check that this is not used, and drop in all modules.
  oneof extra_data {
    // Extra data needed to recommend the "Other work environments" piece of
    // advice.
    OtherWorkEnvAdviceData other_work_env_advice_data = 6;

    // Extra data needed to recommend the "Improve success rate" piece of advice.
    ImproveSuccessRateData improve_success_rate_data = 8;

    // Extra data needed to recommend the "find a job board" piece of advice.
    JobBoardsData job_boards_data = 12;

    // Extra data needed to recommend the "spontaneous application" piece of advice.
    SpontaneousApplicationData spontaneous_application_data = 13;

    // Extra data neded to recommend the "better jobs in job group" piece of advice.
    BetterJobInGroupData better_job_in_group_data = 14;

    // Extra data needed to recommend he "find an association to help you" advice.
    AssociationsData associations_data = 15;

    // Extra data needed for the "commute" advice.
    CommuteData commute_data = 16;

    // Extra data needed for the "volunteer" advice.
    VolunteerData volunteer_data = 17;

    // Extra data needed for the "events" advice.
    EventsData events_data = 18;

    // Extra data needed for the "relocate" advice.
    RelocateData relocate_data = 19;

    // Extra data needed for the "training" advice.
    Trainings training_data = 20;

    // Extra data needed for the "seasonal_relocate" advice.
    MonthlySeasonalJobbingStats seasonal_data = 25;

    // Extra data needed for the "reorient jobbing" advice.
    // DEPRECATED: use reorient_data instead.
    // TODO (marielaure): Convert old user and remove the field.
    ReorientData jobbing_data = 26 [deprecated = true];

    // Extra data needed for the "create your company" advice.
    CreateYourCompanyData create_your_company_data = 27;

    // Extra data needed for the "reorient to close job" advice.
    ReorientData reorient_data = 28;
  }

  // The score the user gave to the piece of advice. A low score means they do
  // not think it was a good advice, for any reasons. A high score means they
  // think the advice was good and they need to work on it.
  // DEPRECATED: Advice are not scored by users anymore.
  // TODO(pascal): Cleanup usage and remove the field, or maybe keep it for
  // historical value.
  int32 score = 11 [deprecated = true];

  // Title of the advice. Most of the time this is empty and is decided by the
  // client, but for some advice modules the server can decide what to display.
  string title = 23;

  // Short version of the title of the advice. Most of the time this is empty
  // and is decided by the client, but for some advice modules the server can
  // decide what to display.
  string short_title = 30;

  // Goal that can be reached when following the piece of advice.
  // Most of the time it is decided at the advice module level but for some
  // advice it is overriden (and translated) by the server.
  // It starts with a lowercase and can finish the sentence "5 more tips to ..."
  string goal = 34;

  // Content for the advice card. Most of the time this is empty and is decided
  // by the client, but for some advice modules the server can decide what to
  // display. This is using Markdown.
  string card_text = 21;

  // Header of the content for the expanded advice card. Most of the time this
  // is empty and is decided by the client, but for some advice modules the
  // server can decide what to display directly. This is using Markdown.
  string expanded_card_header = 24;

  // Content for the expanded advice card. Most of the time this is empty and
  // is decided by the client, but for some advice modules the server can
  // decide what to display directly. This is using Markdown.
  repeated string expanded_card_items = 22;

  // A set of explanations why this advice was picked for this particular
  // project. This is human readable text.
  repeated string explanations = 29;

  // Number of explorations done inside the advice: opening an email template,
  // clicking on an external link, playing a video, etc. Note that not all
  // advice modules implement that properly.
  int32 num_explorations = 31;

  // Whether this advice is given only because the user is using the Alpha
  // version of the advisor.
  bool is_for_alpha_only = 32;

  // Diagnostic categories to which the advice belongs. Most of the time it is
  // decided at the advice module level but for some advice it is overriden by
  // the server.
  repeated DiagnosticTopic diagnostic_topics = 33;
}

message AdviceCategory {
  // ID of the category, e.g. "less-than-10-min", "very-important".
  string category_id = 1;

  // Sorted list of advice in this category.
  repeated string advice_ids = 2;
}

message Advices {
  // Sorted list of advices that we want to give for a project.
  repeated Advice advices = 1;
}

message CommuteData {
  // Cities that the users could consider in their search. We only store the name of the city here.
  repeated string cities = 1;
}

message OtherWorkEnvAdviceData {
  // Work environment for the targeted job group.
  WorkEnvironment work_environment_keywords = 1;
}

message ImproveSuccessRateData {
  // Increase (in percent) of the number of interviews that one could hope for.
  // For instance: 1 is no increase in interviews, and 2 means interviews could be doubled.
  float num_interviews_increase = 1;

  // Job requirements, or assets that we could recommend to the user to improve
  // their success rate.
  JobRequirements requirements = 2;
}

message JobBoardsData {
  // A specific job board title, the user probably does not know about.
  string job_board_title = 1;

  // Whether the job board is specific to the project's target job or job group.
  bool is_specific_to_job_group = 2;

  // Whether the job board is specific to the project's city or region.
  bool is_specific_to_region = 3;
}

message SpontaneousApplicationData {
  // Specific companies to which the user could apply to.
  repeated Company companies = 1;

  // Specific companies to which the user could apply to, to get an alternance contract.
  repeated Company alternance_companies = 2;
}

message BetterJobInGroupData {
  // Sorted list of jobs in the group. The weight is the percentage of job
  // offers from the group that are for this job.
  // TODO(pascal): Create an endpoint to get those jobs instead of storing them
  // in the project's proto.
  repeated WeightedJob jobs = 1;

  // One job that is better than the target one.
  Job better_job = 2;

  // Number of jobs that are better than the target one.
  int32 num_better_jobs = 3;
}

message AssociationsData {
  // Name of a specific association that could help the user.
  string association_name = 1;
}

message VolunteerData {
  // Names of associations that have volunteering missions that the user could
  // take on.
  repeated string association_names = 1;
}

message EventsData {
  // Name of an event happening soon next to the user's target location that
  // the user could attend.
  string event_name = 1;
}

message ReorientData {
  // Jobs suggested for reorientation (holds only the job names).
  repeated Job jobs = 1;

  // DEPRECATED: Generic names of jobs suggested for reorientation
  // e.g. Conducteur / Conductrice d'engins d'exploitation
  repeated string job_names = 2 [deprecated = true];

}

message CreateYourCompanyData {
  // Name of a city close to the user's project where events to learn how to
  // create a company are taking place.
  string city = 1;

  // Time period on which events to learn how to create a company are taking
  // place, e.g. "du 5 au 7 février".
  string period = 2;
}

message DepartementScore {
  // Name of the departement.
  string name = 1;

  // Increase in offers in that departement compared to a reference. 1 means 100% = no increase.
  float offer_ratio = 2;
}

message RelocateData {
  // Departements with the relative number of offers compared to the user's departement.
  repeated DepartementScore departement_scores = 1;
}

enum NumberOfferEstimateOption {
  UNKNOWN_NUMBER_ESTIMATE_OPTION = 0;

  LESS_THAN_2 = 1;

  // Between 2 and 5.
  SOME = 2;

  // Between 6 and 15.
  DECENT_AMOUNT = 3;

  // More than 15.
  A_LOT = 4;
}

// The estimate of the user regarding the training fulfillment.
enum TrainingFulfillmentEstimate {
  UNKNOWN_TRAINING_FULFILLMENT = 0;
  ENOUGH_DIPLOMAS = 1;
  ENOUGH_EXPERIENCE = 2;
  CURRENTLY_IN_TRAINING = 3;
  TRAINING_FULFILLMENT_NOT_SURE = 4;
  NO_TRAINING_REQUIRED = 5;
}

enum ProjectSeniority {
  UNKNOWN_PROJECT_SENIORITY = 0;

  INTERN = 1;

  // Less than 2 years
  JUNIOR = 2;

  // 2 to less than 6 years.
  INTERMEDIARY = 3;

  // 6 to less than 10 years.
  SENIOR = 4;

  // More than 10 years.
  EXPERT = 5;
}

enum ProjectWorkload {
  UNKNOWN_PROJECT_WORKLOAD = 0;
  PART_TIME = 1;
  FULL_TIME = 2;
}

enum PreviousJobSimilarity {
  UNKNOWN_PROJECT_EXPERIENCE = 0;
  DONE_THIS = 1;
  DONE_SIMILAR = 2;
  NEVER_DONE = 3;
}

enum ProjectKind {
  option allow_alias = true;
  UNKNOWN_PROJECT_KIND = 0;
  CREATE_COMPANY = 2 [deprecated = true];
  CREATE_OR_TAKE_OVER_COMPANY = 2;
  TAKE_OVER_COMPANY = 3 [deprecated = true];
  REORIENTATION = 4;
  FIND_A_FIRST_JOB = 5;
  FIND_A_NEW_JOB = 6;
  FIND_ANOTHER_JOB = 7;
}

enum ProjectStatus {
  PROJECT_UNKNOWN_STATUS = 0;

  // This is the default status: the user is currently tackling this project.
  PROJECT_CURRENT = 1;

  // The project is selected by the user, but they have set it on stand-by for
  // a while.
  PROJECT_ON_STAND_BY = 2;

  // The project was current but got completed.
  PROJECT_COMPLETED = 3;

  // The project was current but got deleted.
  PROJECT_DELETED = 4;
}

enum ProjectSource {
  UNKNOWN_PROJECT_SOURCE = 0;

  // The user created this project from scratch.
  PROJECT_MANUALLY_CREATED = 1;

  // An automated system created the project and allowed the user to accept it
  // or not.
  PROJECT_SUGGESTED = 2;
}

enum AdviceStatus {
  UNKNOWN_ADVICE_STATUS = 0;

  // The Advisor has recommended a piece of advice.
  ADVICE_RECOMMENDED = 1;

  // The user has accepted the piece of advice and is starting to engage.
  ADVICE_ACCEPTED = 2 [deprecated = true];

  // The user has declined the piece of advice that was recommended.
  ADVICE_DECLINED = 3 [deprecated = true];

  // The user has finished all steps of the sticky action to engage into the
  // advice.
  ADVICE_ENGAGED = 4 [deprecated = true];

  // The piece of advice was accepted but then canceled during the engagement
  // part (the Sticky Action).
  ADVICE_CANCELED = 5 [deprecated = true];

  // The Advisor never recommended that (but we might still show it to user as
  // an example of things Bob can advise on).
  ADVICE_NOT_RECOMMENDED = 6 [deprecated = true];

  // The user has entered the Advice Page at least once.
  ADVICE_READ = 7;
}

enum PassionateLevel {
  UNKNOWN_PASSION_LEVEL = 0;
  ALIMENTARY_JOB = 1;
  LIKEABLE_JOB = 2;
  PASSIONATING_JOB = 3;
  LIFE_GOAL_JOB = 4;
}
