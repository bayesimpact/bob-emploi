syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "bob_emploi/frontend/api/project.proto";

package bayes.bob;
option go_package="bayes.org/bob_emploi/frontend/api/stats";

message UsersCount {
  // Total number of registered users.
  int32 total_user_count = 1;

  // Number of new registered users since last week (rolling 7 days).
  int32 weekly_new_user_count = 2;

  // Number of users for each department.
  map<string, int32> departement_counts = 4;

  // Number of users for each job group.
  map<string, int32> job_group_counts = 5;

    // Number of users that make a specific number of applications per week.
  map<string, int32> weekly_application_counts = 7;

  // Number of users that have had a specific number of interviews.
  // Deprecated, use medium_search_interview_counts and
  // long_search_interview_counts instead.
  // TODO(sil): Clean this after importing the new ones.
  map<string, int32> interview_counts = 8 [deprecated = true];

  // Number of users searching for 6-8 months that have had a specific
  // number of interviews.
  map<string, int32> medium_search_interview_counts = 9;

  // Number of users searching for more than 12 months that have had a specific
  // number of interviews.
  map<string, int32> long_search_interview_counts = 10;

  // Number of users according to their job passion levels and
  // their job search lengths.
  repeated PassionLevelCategory passion_level_counts = 11;

  // Number of users according to their main challenges.
  map<string, int32> main_challenge_counts = 13;

  // Most given firstnames. For privacy reasons we don't keep firstnames with less than 50
  // occurrences. The keys are the firstnames and the values are the frequency of each firstname
  // among other frequent ones (the frequencies sum up to 1).
  map<string, float> frequent_firstnames = 12;

  // Time when aggregation of data happened.
  google.protobuf.Timestamp aggregated_at = 6;
}

message PassionLevelCategory {
  SearchLengthCategory search_length = 1;
  repeated PassionLevelCount level_counts = 2;
}

message PassionLevelCount {
  // Level of passion the user has for its searched job.
  PassionateLevel passionate_level = 1;

  // Number of users with this passionate level.
  int32 count = 2;
}

// The date at which a campaign was last sent.
message SentEmailDate {

  string campaign_id = 1;

  google.protobuf.Timestamp last_sent = 2;
}

// The date at which a collection was last imported.
message MetaCollection {

  string collection = 1;

  google.protobuf.Timestamp updated_at = 2;
}

enum SearchLengthCategory {
  UNKNOWN_SEARCH_LENGTH = 0;

  // Search length lower than 4 months.
  SHORT_SEARCH_LENGTH = 1;

  // Search length between 4 months and 1 year.
  MEDIUM_SEARCH_LENGTH = 2;

  // Search length over a year.
  LONG_SEARCH_LENGTH = 3;
}

// An action the user may do to face on of Bob's challenges.
message ChallengeAction {
  // A unique identifier for this action.
  string action_id = 1;

  // For each challenge for which this action is relevant, gives the score of this action.
  // The scores are relative to a given challenge, e.g. if we have the following scores:
  //
  //              action-1      action-2
  //  challenge-1    1              3
  //  challenge-2    10             2
  //
  // Then action-2 is considered 3 times as important as action-1 for challenge-1
  // and action-1 is considered 5 times as important as action-2 for challenge-2.
  // But action-1 is not necessarily 10 times as important for challenge-2 than for challenge-1.
  map<string, uint32> score_by_challenge = 2;
}
